class HapticFeedback {constructor() {this.isSupported = 'vibrate' in navigator;this.isEnabled = true;this.intensities = {light:[10],medium:[20],heavy:[30,10,30],success:[20,10,20],error:[50,25,50],warning:[30,10,30,10,30],selection:[5],impact:[15],notification:[25,10,25] };this.init()} init() {this.checkUserPreference();this.bindEvents();this.createHapticSettings()} checkUserPreference() {const saved = localStorage.getItem('haptic-feedback-enabled');if (saved !== null) {this.isEnabled = saved === 'true'} if ('vibrate' in navigator) {try {navigator.vibrate(1)} catch (e) {this.isSupported = false} } } bindEvents() {document.addEventListener('click',this.handleClick.bind(this));document.addEventListener('touchstart',this.handleTouchStart.bind(this));document.addEventListener('touchend',this.handleTouchEnd.bind(this));document.addEventListener('keydown',this.handleKeyDown.bind(this))} handleClick(e) {const target = e.target;if (target.matches('button,.btn,[role="button"]')) {this.trigger('selection')} if (target.matches('a')) {this.trigger('light')} if (target.matches('input,select,textarea')) {this.trigger('selection')} if (target.matches('[role="switch"],.toggle,.switch')) {this.trigger('medium')} } handleTouchStart(e) {const target = e.target;this.longPressTimer = setTimeout(() => {this.trigger('heavy')},500);if (target.matches('.swipeable,.card,.list-item')) {this.trigger('light')} } handleTouchEnd(e) {if (this.longPressTimer) {clearTimeout(this.longPressTimer);this.longPressTimer = null} } handleKeyDown(e) {if (e.key === 'Enter') {this.trigger('selection')} if (e.key === 'Escape') {this.trigger('light')} if (['ArrowUp','ArrowDown','ArrowLeft','ArrowRight'].includes(e.key)) {this.trigger('selection')} } trigger(type = 'light') {if (!this.isSupported || !this.isEnabled) return;const pattern = this.intensities[type] || this.intensities.light;try {navigator.vibrate(pattern)} catch (e) {console.warn('Haptic feedback failed:',e)} } success() {this.trigger('success')} error() {this.trigger('error')} warning() {this.trigger('warning')} selection() {this.trigger('selection')} impact() {this.trigger('impact')} notification() {this.trigger('notification')} toggle() {this.isEnabled = !this.isEnabled;localStorage.setItem('haptic-feedback-enabled',this.isEnabled);if (this.isEnabled) {this.trigger('success')} this.updateSettingsUI()} createHapticSettings() {const settings = document.createElement('div');settings.id = 'haptic-settings';settings.innerHTML = ` <div class="haptic-settings-panel"> <div class="haptic-header"> <h3>Haptic Feedback</h3> <button class="haptic-toggle ${this.isEnabled ? 'enabled' :'disabled'}" onclick="window.hapticFeedback.toggle()"> <span class="haptic-icon">${this.isEnabled ? 'üì≥' :'üîá'}</span> <span class="haptic-text">${this.isEnabled ? 'B·∫≠t' :'T·∫Øt'}</span> </button> </div> <div class="haptic-info"> <p>Rung nh·∫π khi t∆∞∆°ng t√°c v·ªõi ·ª©ng d·ª•ng</p> <p class="haptic-support">${this.isSupported ? '‚úÖ H·ªó tr·ª£' :'‚ùå Kh√¥ng h·ªó tr·ª£'}</p> </div> </div> `;const style = document.createElement('style');style.textContent = ` #haptic-settings {position:fixed;bottom:20px;right:20px;z-index:1000;opacity:0;transform:translateY(20px);transition:all 0.3s ease;pointer-events:none} #haptic-settings.show {opacity:1;transform:translateY(0);pointer-events:auto} .haptic-settings-panel {background:rgba(0,0,0,0.9);backdrop-filter:blur(10px);border-radius:12px;padding:16px;color:white;box-shadow:0 8px 32px rgba(0,0,0,0.3);border:1px solid rgba(255,255,255,0.1);max-width:280px} .haptic-header {display:flex;justify-content:space-between;align-items:center;margin-bottom:12px} .haptic-header h3 {margin:0;font-size:16px;font-weight:600} .haptic-toggle {background:${this.isEnabled ? '#4CAF50' :'#666'};border:none;border-radius:20px;padding:8px 16px;color:white;font-size:14px;font-weight:500;cursor:pointer;transition:all 0.3s ease;display:flex;align-items:center;gap:6px} .haptic-toggle:hover {transform:scale(1.05)} .haptic-toggle:active {transform:scale(0.95)} .haptic-icon {font-size:16px} .haptic-info {font-size:12px;line-height:1.4;color:#ccc} .haptic-support {margin-top:8px;font-weight:500} @media (max-width:480px) {#haptic-settings {bottom:10px;right:10px;left:10px} .haptic-settings-panel {max-width:none} } `;document.head.appendChild(style);document.body.appendChild(settings);setTimeout(() => {settings.classList.add('show')},3000);setTimeout(() => {settings.classList.remove('show')},10000)} updateSettingsUI() {const toggle = document.querySelector('.haptic-toggle');const icon = document.querySelector('.haptic-icon');const text = document.querySelector('.haptic-text');if (toggle && icon && text) {toggle.className = `haptic-toggle ${this.isEnabled ? 'enabled' :'disabled'}`;toggle.style.background = this.isEnabled ? '#4CAF50' :'#666';icon.textContent = this.isEnabled ? 'üì≥' :'üîá';text.textContent = this.isEnabled ? 'B·∫≠t' :'T·∫Øt'} } testPatterns() {const patterns = Object.keys(this.intensities);let index = 0;const testNext = () => {if (index < patterns.length) {const pattern = patterns[index];console.log(`Testing haptic pattern:${pattern}`);this.trigger(pattern);index++;setTimeout(testNext,1000)} };testNext()} getStatus() {return {supported:this.isSupported,enabled:this.isEnabled,patterns:Object.keys(this.intensities) }} } window.hapticFeedback = new HapticFeedback();window.HapticFeedback = HapticFeedback;