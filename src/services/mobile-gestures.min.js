class MobileGestures {constructor() {this.startX = 0;this.startY = 0;this.currentX = 0;this.currentY = 0;this.isDragging = false;this.swipeThreshold = 50;this.pullThreshold = 80;this.isPullToRefresh = false;this.pullDistance = 0;this.init()} init() {if (window.innerWidth > 768) return;this.bindEvents();this.createPullToRefreshIndicator()} bindEvents() {document.addEventListener('touchstart',this.handleTouchStart.bind(this),{passive:false });document.addEventListener('touchmove',this.handleTouchMove.bind(this),{passive:false });document.addEventListener('touchend',this.handleTouchEnd.bind(this),{passive:false });document.addEventListener('mousedown',this.handleMouseDown.bind(this));document.addEventListener('mousemove',this.handleMouseMove.bind(this));document.addEventListener('mouseup',this.handleMouseUp.bind(this))} handleTouchStart(e) {const touch = e.touches[0];this.startX = touch.clientX;this.startY = touch.clientY;this.currentX = touch.clientX;this.currentY = touch.clientY;this.isDragging = false;this.pullDistance = 0;if (window.scrollY === 0 && this.startY > 50) {this.isPullToRefresh = true} } handleTouchMove(e) {if (!this.isPullToRefresh && !this.isDragging) return;const touch = e.touches[0];this.currentX = touch.clientX;this.currentY = touch.clientY;const deltaX = this.currentX - this.startX;const deltaY = this.currentY - this.startY;if (Math.abs(deltaX) > Math.abs(deltaY) && deltaX > this.swipeThreshold) {this.handleSwipeBack(deltaX);e.preventDefault();return} if (this.isPullToRefresh && deltaY > 0) {this.handlePullToRefresh(deltaY);e.preventDefault();return} } handleTouchEnd(e) {if (this.isDragging) {this.finishSwipeBack()} if (this.isPullToRefresh) {this.finishPullToRefresh()} this.reset()} handleSwipeBack(deltaX) {if (!this.isDragging) {this.isDragging = true;this.showSwipeBackIndicator()} const progress = Math.min(deltaX / 200,1);this.updateSwipeBackIndicator(progress)} handlePullToRefresh(deltaY) {this.pullDistance = Math.min(deltaY,120);const progress = this.pullDistance / 120;this.updatePullToRefreshIndicator(progress);if (progress > 0.8 && !this.hapticTriggered) {this.triggerHapticFeedback('medium');this.hapticTriggered = true} } finishSwipeBack() {const deltaX = this.currentX - this.startX;if (deltaX > 150) {this.triggerHapticFeedback('light');this.goBack()} this.hideSwipeBackIndicator()} finishPullToRefresh() {if (this.pullDistance > this.pullThreshold) {this.triggerHapticFeedback('heavy');this.refreshPage()} this.hidePullToRefreshIndicator()} goBack() {if (window.history.length > 1) {window.history.back()} else {window.location.href = '/index.html'} } refreshPage() {document.body.classList.add('refreshing');setTimeout(() => {window.location.reload()},500)} createPullToRefreshIndicator() {const indicator = document.createElement('div');indicator.id = 'pull-to-refresh-indicator';indicator.innerHTML = ` <div class="pull-indicator-content"> <div class="pull-icon">↓</div> <div class="pull-text">Kéo để làm mới</div> </div> `;const style = document.createElement('style');style.textContent = ` #pull-to-refresh-indicator {position:fixed;top:-60px;left:50%;transform:translateX(-50%);width:120px;height:60px;background:rgba(0,0,0,0.8);border-radius:0 0 20px 20px;display:flex;align-items:center;justify-content:center;z-index:1000;transition:top 0.3s ease;backdrop-filter:blur(10px)} .pull-indicator-content {text-align:center;color:white} .pull-icon {font-size:20px;margin-bottom:4px;transition:transform 0.3s ease} .pull-text {font-size:12px;font-weight:500} .refreshing #pull-to-refresh-indicator {top:0} .refreshing .pull-icon {animation:spin 1s linear infinite} @keyframes spin {from {transform:rotate(0deg)} to {transform:rotate(360deg)} } `;document.head.appendChild(style);document.body.appendChild(indicator)} updatePullToRefreshIndicator(progress) {const indicator = document.getElementById('pull-to-refresh-indicator');if (!indicator) return;const top = -60 + (progress * 60);indicator.style.top = `${top}px`;const icon = indicator.querySelector('.pull-icon');const text = indicator.querySelector('.pull-text');if (progress > 0.8) {icon.textContent = '↻';text.textContent = 'Thả để làm mới';indicator.style.background = 'rgba(183,28,28,0.9)'} else {icon.textContent = '↓';text.textContent = 'Kéo để làm mới';indicator.style.background = 'rgba(0,0,0,0.8)'} } hidePullToRefreshIndicator() {const indicator = document.getElementById('pull-to-refresh-indicator');if (indicator) {indicator.style.top = '-60px'} this.isPullToRefresh = false;this.hapticTriggered = false} showSwipeBackIndicator() {let indicator = document.getElementById('swipe-back-indicator');if (!indicator) {indicator = document.createElement('div');indicator.id = 'swipe-back-indicator';indicator.innerHTML = ` <div class="swipe-back-content"> <div class="swipe-icon">←</div> <div class="swipe-text">Vuốt để quay lại</div> </div> `;const style = document.createElement('style');style.textContent = ` #swipe-back-indicator {position:fixed;left:-200px;top:50%;transform:translateY(-50%);width:200px;height:60px;background:rgba(0,0,0,0.8);border-radius:0 30px 30px 0;display:flex;align-items:center;justify-content:center;z-index:1000;transition:left 0.3s ease;backdrop-filter:blur(10px)} .swipe-back-content {text-align:center;color:white} .swipe-icon {font-size:24px;margin-bottom:4px} .swipe-text {font-size:12px;font-weight:500} `;document.head.appendChild(style);document.body.appendChild(indicator)} } updateSwipeBackIndicator(progress) {const indicator = document.getElementById('swipe-back-indicator');if (!indicator) return;const left = -200 + (progress * 200);indicator.style.left = `${left}px`} hideSwipeBackIndicator() {const indicator = document.getElementById('swipe-back-indicator');if (indicator) {indicator.style.left = '-200px'} } handleMouseDown(e) {if (e.button !== 0) return;this.startX = e.clientX;this.startY = e.clientY;this.isDragging = false} handleMouseMove(e) {if (!this.startX) return;this.currentX = e.clientX;this.currentY = e.clientY;const deltaX = this.currentX - this.startX;const deltaY = this.currentY - this.startY;if (Math.abs(deltaX) > 10 || Math.abs(deltaY) > 10) {this.isDragging = true} } handleMouseUp(e) {if (!this.isDragging) {this.startX = 0;return} const deltaX = this.currentX - this.startX;const deltaY = this.currentY - this.startY;if (Math.abs(deltaX) > Math.abs(deltaY) && deltaX > this.swipeThreshold) {this.goBack()} this.startX = 0;this.isDragging = false} triggerHapticFeedback(intensity = 'light') {if ('vibrate' in navigator) {const patterns = {light:[10],medium:[20],heavy:[30,10,30] };navigator.vibrate(patterns[intensity] || patterns.light)} } reset() {this.startX = 0;this.startY = 0;this.currentX = 0;this.currentY = 0;this.isDragging = false;this.isPullToRefresh = false;this.pullDistance = 0;this.hapticTriggered = false} } document.addEventListener('DOMContentLoaded',() => {new MobileGestures()});window.MobileGestures = MobileGestures;