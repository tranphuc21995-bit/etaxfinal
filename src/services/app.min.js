document.addEventListener('DOMContentLoaded',function() {console.log('=== IMPROVED INDEX PAGE DEBUG ===');initializeSecuritySystems()});async function initializeSecuritySystems() {try {window.trustedDeviceManager = new TrustedDeviceManager(db);await performAdvancedAuthentication();initializePage()} catch (error) {console.error('‚ùå Security initialization failed:',error);handleAuthenticationFailure('security_init_failed')} } async function performAdvancedAuthentication() {console.log('üîê Starting advanced authentication...');const userLoggedIn = localStorage.getItem('etax_logged_in_user');const loginSuccess = localStorage.getItem('etax_login_success');if (userLoggedIn && loginSuccess) {console.log('‚úÖ User has valid session,verifying device...');const deviceCheck = await window.trustedDeviceManager.isDeviceTrusted(userLoggedIn);if (deviceCheck.trusted) {console.log('‚úÖ Device verification passed');await window.trustedDeviceManager.updateLastAccess(deviceCheck.deviceId);localStorage.setItem('etax_token_verified','true');localStorage.setItem('etax_device_verified','true');localStorage.setItem('etax_device_id',deviceCheck.deviceId);return} else {console.log('‚ö†Ô∏è Device no longer trusted,clearing session');clearUserSession()} } const deviceCheck = await window.trustedDeviceManager.isDeviceTrusted();if (deviceCheck.trusted) {console.log('‚úÖ Device is trusted,but user not logged in');localStorage.setItem('etax_token_verified','true');localStorage.setItem('etax_device_verified','true');localStorage.setItem('etax_device_id',deviceCheck.deviceId);console.log('üîÑ Redirecting to login page');window.location.href = 'login.html';return} console.log('‚ùå Device not trusted,redirecting to token-login');window.location.href = 'token-login.html'} function clearUserSession() {console.log('üßπ Clearing user session');const deviceVerified = localStorage.getItem('etax_device_verified');const tokenVerified = localStorage.getItem('etax_token_verified');const deviceId = localStorage.getItem('etax_device_id');localStorage.clear();if (deviceVerified === 'true' && tokenVerified === 'true' && deviceId) {localStorage.setItem('etax_device_verified','true');localStorage.setItem('etax_token_verified','true');localStorage.setItem('etax_device_id',deviceId)} } function handleAuthenticationFailure(reason) {console.log('‚ùå Authentication failed:',reason);try {db.ref('securityLogs').push({type:'auth_failure',reason:reason,timestamp:Date.now(),userAgent:navigator.userAgent,url:window.location.href })} catch (error) {console.warn('Could not log security event:',error)} localStorage.clear();switch (reason) {case 'device_not_trusted':window.location.href = 'token-login.html';break;case 'user_not_found':case 'session_expired':window.location.href = 'login.html';break;default:window.location.href = 'token-login.html'} } const firebaseConfig = {apiKey:"AIzaSyD_rJgBFgBulheVenQUE2KXr4PBpSpTCxw",authDomain:"etax-7fbf8.firebaseapp.com",databaseURL:"https:projectId:"etax-7fbf8",storageBucket:"etax-7fbf8.appspot.com",messagingSenderId:"1030026724634",appId:"1:1030026724634:web:d76f5f9dad43bad6fd58a3",measurementId:"G-YS5DLECJE6" };firebase.initializeApp(firebaseConfig);const db = firebase.database();let user = {};async function checkAutoToken() {const urlParams = new URLSearchParams(window.location.search);const autoToken = urlParams.get('autoToken');if (autoToken) {console.log('üîë Auto token detected,processing...',autoToken.substring(0,20) + '...');showNotification('üîë ƒêang x√°c th·ª±c t·ª± ƒë·ªông...','info');try {const tokenSnapshot = await db.ref('deviceTokens/' + autoToken).once('value');if (tokenSnapshot.exists()) {const tokenData = tokenSnapshot.val();if (tokenData.status === 'active' && (!tokenData.expiresAt || Date.now() < tokenData.expiresAt)) {const registrationResult = await window.trustedDeviceManager.registerTrustedDevice( tokenData.userId,autoToken,{registrationMethod:'auto_token' } );if (registrationResult.success) {console.log('‚úÖ Auto token registration successful');await db.ref('deviceTokens/' + autoToken + '/status').set('used');await db.ref('deviceTokens/' + autoToken + '/usedAt').set(Date.now());localStorage.setItem('etax_token_verified','true');localStorage.setItem('etax_device_verified','true');localStorage.setItem('etax_device_id',registrationResult.deviceId);showNotification('‚úÖ X√°c th·ª±c t·ª± ƒë·ªông th√†nh c√¥ng!','success');setTimeout(() => {window.location.href = 'login.html'},2000);return} } } console.log('‚ùå Auto token invalid or expired');showNotification('‚ùå Token t·ª± ƒë·ªông kh√¥ng h·ª£p l·ªá','error')} catch (error) {console.error('‚ùå Auto token error:',error);showNotification('‚ùå L·ªói x√°c th·ª±c t·ª± ƒë·ªông','error')} window.history.replaceState({},document.title,window.location.pathname)} } function initializePage() {const userInfo = localStorage.getItem("etax_user_info");if (userInfo) {try {user = JSON.parse(userInfo);document.getElementById("user-mst").innerText = "MST:" + (user.mst || "...");document.getElementById("user-name").innerText = user.name || "(Ch∆∞a ƒëƒÉng nh·∫≠p)";if (document.getElementById("slide-username")) {document.getElementById("slide-username").innerText = user.name || "..."} } catch (error) {console.error('Error parsing user info:',error);user = {}} } console.log('User object loaded:',user);setupEventListeners();checkAutoToken();updateDeviceLastAccess();console.log('‚úÖ Page initialized successfully')} async function updateDeviceLastAccess() {try {const deviceId = localStorage.getItem('etax_device_id');if (deviceId && window.trustedDeviceManager) {await window.trustedDeviceManager.updateLastAccess(deviceId);console.log('üì± Device last access updated')} } catch (error) {console.warn('Could not update device last access:',error)} } function openMenu() {document.getElementById("slideMenu").classList.add("open");document.getElementById("menuOverlay").classList.add("show");document.getElementById("slide-username").innerText = user.name || "..."} function closeMenu() {document.getElementById("slideMenu").classList.remove("open");document.getElementById("menuOverlay").classList.remove("show")} function logout() {if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?')) {logDeviceActivity('user_logout');clearUserSession();showNotification('ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!','success');setTimeout(() => {window.location.href = 'login.html'},1000)} } async function logDeviceActivity(activityType,details = {}) {try {const deviceId = localStorage.getItem('etax_device_id');if (deviceId && window.trustedDeviceManager) {await window.trustedDeviceManager.logDeviceActivity( activityType,deviceId,user.mst || 'unknown',{timestamp:Date.now(),userAgent:navigator.userAgent,url:window.location.href,...details } )} } catch (error) {console.warn('Could not log device activity:',error)} } function startSecurityMonitoring() {document.addEventListener('visibilitychange',function() {if (!document.hidden) {console.log('üëÅÔ∏è Page became visible,checking security...');logDeviceActivity('page_focus');updateDeviceLastAccess()} else {logDeviceActivity('page_blur')} });window.addEventListener('online',function() {console.log('üåê Back online');logDeviceActivity('network_online');updateDeviceLastAccess()});window.addEventListener('offline',function() {console.log('üì¥ Gone offline');logDeviceActivity('network_offline')});window.addEventListener('beforeunload',function() {logDeviceActivity('page_unload')});console.log('üõ°Ô∏è Security monitoring started')} function setupEventListeners() {startSecurityMonitoring();console.log('üì° Event listeners setup complete')} function showNotification(message,type = 'info') {let notification = document.getElementById('app-notification');if (!notification) {notification = document.createElement('div');notification.id = 'app-notification';notification.style.cssText = ` position:fixed;top:20px;right:20px;max-width:300px;padding:15px;border-radius:8px;color:white;font-weight:bold;z-index:10000;transform:translateX(350px);transition:transform 0.3s ease;`;document.body.appendChild(notification)} notification.textContent = message;const colors = {info:'#2196F3',success:'#4CAF50',error:'#f44336',warning:'#FF9800' };notification.style.backgroundColor = colors[type] || colors.info;notification.style.transform = 'translateX(0)';setTimeout(() => {notification.style.transform = 'translateX(350px)'},5000)} function getUserAgent() {return {userAgent:navigator.userAgent,platform:navigator.platform,language:navigator.language,cookieEnabled:navigator.cookieEnabled,onLine:navigator.onLine }} console.log('üöÄ Improved app.js loaded successfully');