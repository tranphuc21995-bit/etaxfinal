let trustedDeviceManager;let isRedirectFromTokenLogin = false;document.addEventListener('DOMContentLoaded',function () {console.log('=== FIXED LOGIN PAGE - NO INFINITE LOOP ===');initializeLoginPage()});async function initializeLoginPage() {try {checkRedirectFlags();trustedDeviceManager = new TrustedDeviceManager(db);if (!isRedirectFromTokenLogin) {console.log('🔍 Normal access - checking authentication...');await checkAuthenticationSafely()} else {console.log('✅ Redirect from token-login - SKIP auth check');showMessage('✅ Thiết bị đã được xác thực! Vui lòng đăng nhập.','success')} setupLoginForm()} catch (error) {console.error('❌ Login page initialization failed:',error);showMessage('Lỗi khởi tạo trang đăng nhập','error')} } function checkRedirectFlags() {const redirectFlag = localStorage.getItem('etax_redirect_from_token_login');const deviceVerificationComplete = localStorage.getItem('etax_device_verification_complete');const skipDeviceCheck = localStorage.getItem('etax_skip_device_check');const windowFlag = window.skipDeviceCheckOnLogin;console.log('🔍 Checking redirect flags:',{redirectFlag,deviceVerificationComplete,skipDeviceCheck,windowFlag });if (redirectFlag === 'true' || deviceVerificationComplete === 'true' || skipDeviceCheck === 'true' || windowFlag === true) {isRedirectFromTokenLogin = true;console.log('🔄 DETECTED:Redirect from token-login → Skip device check');localStorage.removeItem('etax_redirect_from_token_login');localStorage.removeItem('etax_device_verification_complete');localStorage.removeItem('etax_skip_device_check');window.skipDeviceCheckOnLogin = false} } async function checkAuthenticationSafely() {try {const userLoggedIn = localStorage.getItem('etax_logged_in_user');const loginSuccess = localStorage.getItem('etax_login_success');console.log('🔍 Authentication status:',{userLoggedIn:!!userLoggedIn,loginSuccess:!!loginSuccess });if (userLoggedIn && loginSuccess) {console.log('✅ User already logged in → redirect to index');showMessage('Đã đăng nhập,đang chuyển hướng...','info');setTimeout(() => {window.location.href = 'index.html'},1000);return} console.log('🔍 Checking device trust...');const deviceCheck = await trustedDeviceManager.isDeviceTrusted();if (!deviceCheck.trusted) {console.log('⚠️ Device not trusted - but NOT auto-redirecting');showMessage('⚠️ Thiết bị chưa được xác thực. Vui lòng xác thực thiết bị trước khi đăng nhập.','warning');showDeviceAuthPrompt();return} console.log('✅ Device is trusted → ready for login');showMessage('Thiết bị đã được tin cậy. Vui lòng đăng nhập.','info')} catch (error) {console.error('❌ Authentication check failed:',error);showMessage('Lỗi kiểm tra xác thực:' + error.message,'error')} } function showDeviceAuthPrompt() {const promptHtml = ` <div id="deviceAuthPrompt" style=" background:rgba(255,152,0,0.1);border:1px solid #ff9800;border-radius:8px;padding:16px;margin:16px 0;text-align:center;"> <p style="margin-bottom:12px;color:#ff9800;"> ⚠️ Thiết bị chưa được xác thực </p> <button onclick="redirectToTokenLogin()" style=" background:#ff9800;color:white;border:none;padding:8px 16px;border-radius:4px;cursor:pointer;margin-right:8px;">Xác thực thiết bị</button> <button onclick="dismissPrompt()" style=" background:transparent;color:#ff9800;border:1px solid #ff9800;padding:8px 16px;border-radius:4px;cursor:pointer;">Bỏ qua</button> </div> `;const container = document.querySelector('.container') || document.body;container.insertAdjacentHTML('afterbegin',promptHtml)} function redirectToTokenLogin() {console.log('🔄 User manually requesting device auth');window.location.href = 'token-login.html'} function dismissPrompt() {const prompt = document.getElementById('deviceAuthPrompt');if (prompt) {prompt.remove()} showMessage('Bạn có thể đăng nhập với tài khoản có sẵn hoặc xác thực thiết bị sau.','info')} function setupLoginForm() {console.log('🎨 Setting up login form...');const taxIdInput = document.getElementById("tax-id");if (taxIdInput) {setTimeout(() => taxIdInput.focus(),100)} const passwordInput = document.getElementById("password");if (passwordInput) {passwordInput.addEventListener('keypress',function (e) {if (e.key === 'Enter') {e.preventDefault();login()} })} if (taxIdInput) {taxIdInput.addEventListener('keypress',function (e) {if (e.key === 'Enter') {e.preventDefault();if (passwordInput) passwordInput.focus()} })} const forms = document.querySelectorAll('form');forms.forEach(form => {form.addEventListener('submit',function (e) {e.preventDefault();login()})});console.log('✅ Login form setup complete')} async function login() {const taxId = document.getElementById("tax-id")?.value?.trim();const password = document.getElementById("password")?.value?.trim();if (!taxId || !password) {showMessage('Vui lòng nhập đầy đủ thông tin','error');return} const loginBtn = document.querySelector('.btn-login');if (loginBtn) {loginBtn.classList.add('loading');loginBtn.textContent = 'Đang đăng nhập...'} try {console.log('🔐 Attempting login for:',taxId);const userRef = db.ref('taxpayers/' + taxId);const snapshot = await userRef.once('value');if (!snapshot.exists()) {throw new Error('Mã số thuế không tồn tại')} const userData = snapshot.val();if (userData.password !== password) {throw new Error('Mật khẩu không chính xác')} console.log('✅ Login successful');localStorage.setItem('etax_logged_in_user',taxId);localStorage.setItem('etax_login_success','true');localStorage.setItem('etax_user_data',JSON.stringify(userData));await userRef.update({lastLogin:Date.now(),lastLoginIP:await getClientIP() });showMessage('Đăng nhập thành công!','success');setTimeout(() => {window.location.href = 'index.html'},1000)} catch (error) {console.error('❌ Login failed:',error);showMessage('Lỗi đăng nhập:' + error.message,'error')} finally {if (loginBtn) {loginBtn.classList.remove('loading');loginBtn.textContent = 'Đăng nhập'} } } async function getClientIP() {try {const response = await fetch('https:const data = await response.json();return data.ip} catch (error) {return 'unknown'} } function showMessage(text,type = 'info') {const oldMessage = document.querySelector('.message');if (oldMessage) oldMessage.remove();const message = document.createElement('div');message.className = `message ${type}-msg`;message.textContent = text;message.style.display = 'block';const container = document.querySelector('.container') || document.body;container.insertBefore(message,container.firstChild);setTimeout(() => {if (message.parentNode) {message.remove()} },5000)} function showError(message) {showMessage(message,'error')} function showSuccess(message) {showMessage(message,'success')} function showInfo(message) {showMessage(message,'info')} function showWarning(message) {showMessage(message,'warning')} console.log('✅ Fixed login.js loaded - No infinite loop!');