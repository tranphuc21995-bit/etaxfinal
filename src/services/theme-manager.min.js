class ThemeManager {constructor() {this.currentTheme = 'corporate';this.themes = this.initializeThemes();this.userConfig = {}} initializeThemes() {return {"corporate":{name:"Doanh nghi·ªáp",description:"Giao di·ªán chuy√™n nghi·ªáp cho doanh nghi·ªáp",colors:{primary:"#1976d2",secondary:"#ff5722",success:"#4caf50",warning:"#ff9800",error:"#f44336",background:"#f5f7fa",surface:"#ffffff",text:"#212121",textSecondary:"#757575" },layout:{type:"sidebar-left",sidebarWidth:"280px",headerHeight:"64px",contentPadding:"24px",borderRadius:"8px" },typography:{fontFamily:"'Roboto','SF Pro Display',sans-serif",fontSize:{h1:"2.5rem",h2:"2rem",h3:"1.75rem",body:"1rem",small:"0.875rem" },fontWeight:{light:300,normal:400,medium:500,bold:700 } },features:["dashboard","tax","report","bank","employee","analytics"],components:{button:"elevated",card:"outlined",table:"striped",form:"filled" } },"individual":{name:"C√° nh√¢n",description:"Giao di·ªán th√¢n thi·ªán cho ng∆∞·ªùi d√πng c√° nh√¢n",colors:{primary:"#4caf50",secondary:"#ffeb3b",success:"#8bc34a",warning:"#ff9800",error:"#f44336",background:"#e8f5e8",surface:"#ffffff",text:"#1b5e20",textSecondary:"#4caf50" },layout:{type:"top-nav",sidebarWidth:"0px",headerHeight:"56px",contentPadding:"16px",borderRadius:"16px" },typography:{fontFamily:"'Inter','SF Pro Display',sans-serif",fontSize:{h1:"2.25rem",h2:"1.875rem",h3:"1.5rem",body:"1rem",small:"0.875rem" },fontWeight:{light:300,normal:400,medium:500,bold:600 } },features:["dashboard","tax","personal","calculator","guide"],components:{button:"contained",card:"elevated",table:"simple",form:"outlined" } },"government":{name:"C∆° quan nh√† n∆∞·ªõc",description:"Giao di·ªán trang tr·ªçng cho c∆° quan ch√≠nh ph·ªß",colors:{primary:"#d32f2f",secondary:"#ffc107",success:"#388e3c",warning:"#f57c00",error:"#d32f2f",background:"#fff8e1",surface:"#ffffff",text:"#b71c1c",textSecondary:"#d32f2f" },layout:{type:"sidebar-right",sidebarWidth:"300px",headerHeight:"72px",contentPadding:"32px",borderRadius:"4px" },typography:{fontFamily:"'Times New Roman','serif'",fontSize:{h1:"2.75rem",h2:"2.25rem",h3:"1.875rem",body:"1.125rem",small:"1rem" },fontWeight:{light:300,normal:400,medium:600,bold:700 } },features:["dashboard","official","document","approval","seal","archive"],components:{button:"outlined",card:"elevated",table:"bordered",form:"standard" } } }} async applyTheme(themeName,userConfig = {}) {try {console.log(`üé® Applying theme:${themeName}`);const theme = this.themes[themeName];if (!theme) {console.error(`‚ùå Theme '${themeName}' not found`);return false} const finalTheme = this.mergeWithUserConfig(theme,userConfig);this.applyCSSVariables(finalTheme);this.applyLayout(finalTheme);await this.loadThemeCSS(themeName);this.applyTypography(finalTheme);this.currentTheme = themeName;this.userConfig = userConfig;console.log(`‚úÖ Theme '${themeName}' applied successfully`);this.triggerThemeChangeEvent(themeName,finalTheme);return true} catch (error) {console.error('‚ùå Error applying theme:',error);return false} } applyCSSVariables(theme) {const root = document.documentElement;Object.keys(theme.colors).forEach(colorKey => {root.style.setProperty(`--color-${colorKey}`,theme.colors[colorKey])});Object.keys(theme.layout).forEach(layoutKey => {root.style.setProperty(`--layout-${layoutKey}`,theme.layout[layoutKey])});root.style.setProperty('--font-family',theme.typography.fontFamily);Object.keys(theme.typography.fontSize).forEach(sizeKey => {root.style.setProperty(`--font-size-${sizeKey}`,theme.typography.fontSize[sizeKey])});Object.keys(theme.typography.fontWeight).forEach(weightKey => {root.style.setProperty(`--font-weight-${weightKey}`,theme.typography.fontWeight[weightKey])})} applyLayout(theme) {document.body.className = document.body.className.replace(/layout-\S+/g,'');document.body.className = document.body.className.replace(/theme-\S+/g,'');document.body.classList.add(`theme-${this.currentTheme}`);document.body.classList.add(`layout-${theme.layout.type}`);document.body.setAttribute('data-layout',theme.layout.type);document.body.setAttribute('data-theme',this.currentTheme)} async loadThemeCSS(themeName) {return new Promise((resolve) => {const existingThemeCSS = document.querySelector('link[data-theme-css]');if (existingThemeCSS) {existingThemeCSS.remove()} const themeCSS = document.createElement('link');themeCSS.rel = 'stylesheet';themeCSS.href = `css/themes/${themeName}.css`;themeCSS.setAttribute('data-theme-css',themeName);themeCSS.onload = () => resolve();themeCSS.onerror = () => {console.warn(`‚ö†Ô∏è Theme CSS not found:${themeName}.css`);resolve()};document.head.appendChild(themeCSS)})} applyTypography(theme) {document.body.style.fontFamily = theme.typography.fontFamily} mergeWithUserConfig(theme,userConfig) {const merged = JSON.parse(JSON.stringify(theme));if (userConfig.ui_preferences?.colors) {Object.assign(merged.colors,userConfig.ui_preferences.colors)} if (userConfig.ui_preferences?.layout) {Object.assign(merged.layout,userConfig.ui_preferences.layout)} if (userConfig.ui_preferences?.typography) {Object.assign(merged.typography,userConfig.ui_preferences.typography)} return merged} triggerThemeChangeEvent(themeName,theme) {const event = new CustomEvent('themeChanged',{detail:{themeName:themeName,theme:theme,userConfig:this.userConfig } });document.dispatchEvent(event)} getAvailableThemes() {return Object.keys(this.themes).map(key => ({key:key,name:this.themes[key].name,description:this.themes[key].description }))} getCurrentTheme() {return {key:this.currentTheme,theme:this.themes[this.currentTheme],userConfig:this.userConfig }} async saveUserThemePreference(mst,themeName,customConfig = {}) {try {if (firebase && firebase.database) {await firebase.database().ref(`user_configs/${mst}`).update({theme:themeName,ui_preferences:customConfig,updated_at:new Date().toISOString() });console.log(`‚úÖ Saved theme preference for ${mst}:${themeName}`);return true} } catch (error) {console.error('‚ùå Error saving theme preference:',error);return false} } async loadUserThemePreference(mst) {try {if (firebase && firebase.database) {const snapshot = await firebase.database().ref(`user_configs/${mst}`).once('value');if (snapshot.exists()) {const config = snapshot.val();return {theme:config.theme || 'corporate',userConfig:config }} } } catch (error) {console.error('‚ùå Error loading theme preference:',error)} return {theme:'corporate',userConfig:{} }} detectUserTypeTheme(userType) {const typeToTheme = {'company':'corporate','corporate':'corporate','business':'corporate','individual':'individual','personal':'individual','government':'government','official':'government','state':'government' };return typeToTheme[userType] || 'corporate'} } window.ThemeManager = ThemeManager;document.addEventListener('DOMContentLoaded',function() {if (!window.themeManager) {window.themeManager = new ThemeManager();console.log('üé® Theme Manager initialized')} });console.log('üé® Theme Manager v1.0 loaded successfully!');